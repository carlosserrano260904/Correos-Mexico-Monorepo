import * as React from 'react';
import {
  StyleSheet,
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  Dimensions,
  SafeAreaView,
} from 'react-native';
import {
  ArrowLeft,
  Package,
  MapPin,
  Calendar,
  FileText,
  Hash,
  Truck,
  Navigation,
} from 'lucide-react-native';
import { moderateScale } from 'react-native-size-matters';
import MapView, { Marker, PROVIDER_GOOGLE } from 'react-native-maps';

const screenWidth = Dimensions.get('screen').width;
const screenHeight = Dimensions.get('screen').height;

interface Package {
  id: string;
  sku: string;
  numero_guia: string;
  estatus: string;
  latitud: number;
  longitud: number;
  fecha_creacion: string;
  indicaciones: string;
  calle: string;
  colonia: string;
  cp: string;
}

interface PackageScreenProps {
  route: {
    params: {
      package: Package;
    };
  };
  navigation: any;
}

export default function PackageScreen({ route, navigation }: PackageScreenProps) {
  const { package: packageData } = route.params;

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('es-MX', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'entregado':
        return '#4CAF50';
      case 'fallido':
        return '#F44336';
      case 'pendiente':
        return '#FF9800';
      case 'en_ruta':
        return '#2196F3';
      default:
        return '#9E9E9E';
    }
  };

  const getStatusText = (status: string) => {
    switch (status.toLowerCase()) {
      case 'entregado':
        return 'Entregado';
      case 'fallido':
        return 'Entrega Fallida';
      case 'pendiente':
        return 'Pendiente';
      case 'en_ruta':
        return 'En Ruta';
      default:
        return status;
    }
  };

  const openInMaps = () => {
    const url = `https://www.google.com/maps/dir/?api=1&destination=${packageData.latitud},${packageData.longitud}`;
    // En React Native usarías Linking.openURL(url)
    console.log('Abrir en mapas:', url);
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <ArrowLeft color="white" size={moderateScale(24)} />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Detalle del Paquete</Text>
        <View style={styles.placeholder} />
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Mapa */}
        <View style={styles.mapContainer}>
          <MapView
            provider={PROVIDER_GOOGLE}
            style={styles.map}
            initialRegion={{
              latitude: packageData.latitud,
              longitude: packageData.longitud,
              latitudeDelta: 0.01,
              longitudeDelta: 0.01,
            }}
          >
            <Marker
              coordinate={{
                latitude: packageData.latitud,
                longitude: packageData.longitud,
              }}
              title={`SKU: ${packageData.sku}`}
              description={`${packageData.calle}, ${packageData.colonia}`}
            />
          </MapView>
          
          <TouchableOpacity style={styles.directionsButton} onPress={openInMaps}>
            <Navigation color="white" size={moderateScale(16)} />
            <Text style={styles.directionsText}>Direcciones</Text>
          </TouchableOpacity>
        </View>

        {/* Estado del paquete */}
        <View style={styles.statusContainer}>
          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(packageData.estatus) }]}>
            <Text style={styles.statusBadgeText}>{getStatusText(packageData.estatus)}</Text>
          </View>
        </View>

        {/* Información del paquete */}
        <View style={styles.infoContainer}>
          <Text style={styles.sectionTitle}>Información del Paquete</Text>
          
          <View style={styles.infoGrid}>
            <InfoItem
              icon={<Hash color="#DE1484" size={moderateScale(20)} />}
              label="SKU"
              value={packageData.sku}
            />
            
            <InfoItem
              icon={<Truck color="#DE1484" size={moderateScale(20)} />}
              label="Número de Guía"
              value={packageData.numero_guia}
            />
            
            <InfoItem
              icon={<Package color="#DE1484" size={moderateScale(20)} />}
              label="ID del Paquete"
              value={packageData.id}
            />
            
            <InfoItem
              icon={<Calendar color="#DE1484" size={moderateScale(20)} />}
              label="Fecha de Creación"
              value={formatDate(packageData.fecha_creacion)}
            />
          </View>
        </View>

        {/* Dirección de entrega */}
        <View style={styles.infoContainer}>
          <Text style={styles.sectionTitle}>Dirección de Entrega</Text>
          
          <View style={styles.addressCard}>
            <MapPin color="#DE1484" size={moderateScale(24)} />
            <View style={styles.addressInfo}>
              <Text style={styles.addressText}>{packageData.calle}</Text>
              <Text style={styles.addressSecondary}>
                {packageData.colonia}, CP {packageData.cp}
              </Text>
              <Text style={styles.coordinates}>
                Lat: {packageData.latitud.toFixed(6)}, Lng: {packageData.longitud.toFixed(6)}
              </Text>
            </View>
          </View>
        </View>

        {/* Indicaciones */}
        {packageData.indicaciones && (
          <View style={styles.infoContainer}>
            <Text style={styles.sectionTitle}>Indicaciones Especiales</Text>
            <View style={styles.instructionsCard}>
              <FileText color="#DE1484" size={moderateScale(20)} />
              <Text style={styles.instructionsText}>{packageData.indicaciones}</Text>
            </View>
          </View>
        )}

        {/* Botones de acción */}
        <View style={styles.actionsContainer}>
          <TouchableOpacity style={styles.primaryButton}>
            <Text style={styles.primaryButtonText}>Marcar como Entregado</Text>
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.secondaryButton}>
            <Text style={styles.secondaryButtonText}>Reportar Problema</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

interface InfoItemProps {
  icon: React.ReactNode;
  label: string;
  value: string;
}

const InfoItem: React.FC<InfoItemProps> = ({ icon, label, value }) => (
  <View style={styles.infoItem}>
    <View style={styles.infoItemHeader}>
      {icon}
      <Text style={styles.infoLabel}>{label}</Text>
    </View>
    <Text style={styles.infoValue}>{value}</Text>
  </View>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  header: {
    backgroundColor: '#DE1484',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: moderateScale(16),
    paddingVertical: moderateScale(16),
    paddingTop: moderateScale(20),
  },
  backButton: {
    padding: moderateScale(8),
    borderRadius: moderateScale(20),
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
  },
  headerTitle: {
    color: 'white',
    fontSize: moderateScale(18),
    fontWeight: '700',
  },
  placeholder: {
    width: moderateScale(40),
  },
  content: {
    flex: 1,
  },
  mapContainer: {
    height: moderateScale(200),
    margin: moderateScale(16),
    borderRadius: moderateScale(12),
    overflow: 'hidden',
    position: 'relative',
  },
  map: {
    flex: 1,
  },
  directionsButton: {
    position: 'absolute',
    bottom: moderateScale(16),
    right: moderateScale(16),
    backgroundColor: '#DE1484',
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: moderateScale(12),
    paddingVertical: moderateScale(8),
    borderRadius: moderateScale(20),
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
  },
  directionsText: {
    color: 'white',
    fontSize: moderateScale(14),
    fontWeight: '600',
    marginLeft: moderateScale(4),
  },
  statusContainer: {
    alignItems: 'center',
    marginBottom: moderateScale(24),
  },
  statusBadge: {
    paddingHorizontal: moderateScale(20),
    paddingVertical: moderateScale(10),
    borderRadius: moderateScale(25),
  },
  statusBadgeText: {
    color: 'white',
    fontSize: moderateScale(16),
    fontWeight: '700',
  },
  infoContainer: {
    marginHorizontal: moderateScale(16),
    marginBottom: moderateScale(24),
  },
  sectionTitle: {
    fontSize: moderateScale(18),
    fontWeight: '700',
    color: '#333',
    marginBottom: moderateScale(16),
  },
  infoGrid: {
    gap: moderateScale(16),
  },
  infoItem: {
    backgroundColor: '#f8f9fa',
    padding: moderateScale(16),
    borderRadius: moderateScale(12),
    borderLeftWidth: 4,
    borderLeftColor: '#DE1484',
  },
  infoItemHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: moderateScale(8),
  },
  infoLabel: {
    fontSize: moderateScale(14),
    fontWeight: '600',
    color: '#666',
    marginLeft: moderateScale(8),
  },
  infoValue: {
    fontSize: moderateScale(16),
    fontWeight: '500',
    color: '#333',
    lineHeight: moderateScale(22),
  },
  addressCard: {
    flexDirection: 'row',
    backgroundColor: '#f8f9fa',
    padding: moderateScale(16),
    borderRadius: moderateScale(12),
    borderLeftWidth: 4,
    borderLeftColor: '#DE1484'
  },
});